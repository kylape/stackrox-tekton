apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: stackrox
spec:
  description: | 
    This pipeline clones a git repo, builds a Docker image with Kaniko and
    pushes it to a registry
  params:
  - name: repo-url
    type: string
  - name: revision
    type: string
  - name: builder-image
    type: string
  workspaces:
  - name: shared-data
  - name: build-cache
  tasks:
  - name: fetch-source
    workspaces:
    - name: output
      workspace: shared-data
    taskRef:
      name: git-clone
    params:
    - name: url
      value: $(params.repo-url)
    - name: submodules
      value: "false"
    - name: revision
      value: $(params.revision)
  #- name: unit-test
  #  runAfter:
  #  - go-mod-tidy
  #  workspaces:
  #  - name: source
  #    workspace: shared-data
  #  - name: build-cache
  #    workspace: build-cache
  #  taskSpec:
  #    steps:
  #    - name: unit-test
  #      image: $(params.builder-image)
  #      script: |
  #        #!/usr/bin/env bash
  #        set -ex
  #        git config --global --add safe.directory /workspace/source
  #        cd $(workspaces.source.path)
  #        export PATH=$PATH:/go/bin
  #        export GOMODCACHE=$(workspaces.build-cache.path)/go-mod-cache
  #        export GOCACHE=$(workspaces.build-cache.path)/build-cache
  #        make go-unit-tests
  - name: scanner-bundle
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      steps:
      - name: scanner-bundle
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          unzip /bundle.zip
  - name: fetch-npm-cache
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: fetch-cache
    params:
    - name: HASHED_FILE_PATH
      value: ui/apps/platform/package.json
    - name: BUCKET_NAME
      value: npm-cache
  - name: npm-install
    runAfter:
    - fetch-npm-cache
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskSpec:
      steps:
      - name: npm-install
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          git config --global --add safe.directory  $(workspaces.source.path)
          npm config set cache $(workspaces.build-cache.path)/npm-cache
          cd $(workspaces.source.path)/ui/apps/platform
          npm ci
  - name: put-npm-cache
    runAfter:
    - npm-install
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: put-cache
    params:
    - name: HASHED_FILE_PATH
      value: ui/apps/platform/package.json
    - name: BUCKET_NAME
      value: npm-cache
  - name: download
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      steps:
      - name: download
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          export PATH=$PATH:/go/bin
          mkdir data
          make download
  - name: submodule
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    taskSpec:
      steps:
      - name: submodule
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          git config --global --add safe.directory $(workspaces.source.path)
          git submodule update --init --recursive scannerv2
  - name: gendocs
    runAfter:
    - go-mod-tidy
    - npm-install
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskSpec:
      steps:
      - name: prep
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          export PATH=$PATH:/go/bin
          export GOMODCACHE=$(workspaces.build-cache.path)/go-mod-cache
          export GOCACHE=$(workspaces.build-cache.path)/build-cache
          make image/rhel/docs/api/v1/swagger.json image/rhel/docs/api/v2/swagger.json
          npm exec -- swagger2openapi ./image/rhel/docs/api/v1/swagger.json -o ./image/rhel/docs/api/v1/openapi.json
          npm exec -- swagger2openapi ./image/rhel/docs/api/v2/swagger.json -o ./image/rhel/docs/api/v2/openapi.json
      - name: swagger-codegen
        image: swaggerapi/swagger-codegen-cli
        script: |
          #!/usr/bin/env sh
          set -ex
          cd $(workspaces.source.path)
          java -jar /opt/swagger-codegen-cli/swagger-codegen-cli.jar generate -l html2 -i image/rhel/docs/api/v1/swagger.json -o image/rhel/docs/api/v1/reference
  - name: fetch-gomod-cache
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: fetch-cache
    params:
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-mod-cache
  - name: go-mod-tidy
    runAfter:
    - fetch-gomod-cache
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskSpec:
      steps:
      - name: go-mod-tidy
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          mkdir -p $(workspaces.build-cache.path)/build-cache
          cd $(workspaces.source.path)
          GOMODCACHE=$(workspaces.build-cache.path)/go-mod-cache GOCACHE=$(workspaces.build-cache.path)/build-cache /go/bin/go mod tidy
  - name: put-gomod-cache
    runAfter:
    - go-mod-tidy
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: put-cache
    params:
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-mod-cache
  - name: fetch-scanner-mod-cache
    runAfter:
    - submodule
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: fetch-cache
    params:
    - name: HASHED_FILE_PATH
      value: scannerv2/go.mod
    - name: BUCKET_NAME
      value: scanner-mod-cache
  - name: fetch-scanner-cache
    runAfter:
    - submodule
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: fetch-cache
    params:
    - name: HASHED_FILE_PATH
      value: scannerv2/go.mod
    - name: BUCKET_NAME
      value: scanner-cache
  - name: build-scanner-v2
    runAfter:
    - fetch-scanner-cache
    - submodule
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskSpec:
      steps:
      - name: build-updater
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          export PATH=$PATH:/go/bin
          GOMODCACHE=$(workspaces.build-cache.path)/scanner-mod-cache GOCACHE=$(workspaces.build-cache.path)/scanner-cache make bin/updater
      - name: build-scanner-v2
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          export PATH=$PATH:/go/bin
          GOMODCACHE=$(workspaces.build-cache.path)/scanner-mod-cache GOCACHE=$(workspaces.build-cache.path)/scanner-cache make bin/scanner-v2
  - name: put-scanner-mod-cache
    runAfter:
    - build-scanner-v2
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: put-cache
    params:
    - name: HASHED_FILE_PATH
      value: scannerv2/go.mod
    - name: BUCKET_NAME
      value: scanner-mod-cache
  - name: put-scanner-cache
    runAfter:
    - build-scanner-v2
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: put-cache
    params:
    - name: HASHED_FILE_PATH
      value: scannerv2/go.mod
    - name: BUCKET_NAME
      value: scanner-cache
  - name: fetch-go-cache
    runAfter:
    - fetch-source
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: fetch-cache
    params:
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-cache
  - name: build-stackrox-go-binaries
    runAfter:
    - go-mod-tidy
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskSpec:
      steps:
      - name: build-go-binaries
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.source.path)
          export PATH=$PATH:/go/bin
          GOMODCACHE=$(workspaces.build-cache.path)/go-mod-cache GOCACHE=$(workspaces.build-cache.path)/go-cache make central secured-cluster bin/installer
  - name: put-go-cache
    runAfter:
    - build-stackrox-go-binaries
    workspaces:
    - name: source
      workspace: shared-data
    - name: build-cache
      workspace: build-cache
    taskRef:
      name: put-cache
    params:
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-cache
  - name: build-image
    runAfter:
    - build-stackrox-go-binaries
    - build-scanner-v2
    - gendocs
    - download
    - npm-install
    workspaces:
    - name: source
      workspace: shared-data
    taskRef:
      name: buildah
    params:
    - name: IMAGE
      value: kind-registry:5000/stackrox/stackrox:latest
    - name: PUSH_EXTRA_ARGS
      value: "--tls-verify=false"
  - name: deploy-stackrox
    runAfter:
    - build-image
    taskSpec:
      steps:
      - name: deploy-stackrox
        image: localhost:5001/stackrox/stackrox:latest
        command:
        script: |
          #!/usr/bin/env bash
          set -ex
          config_file=$(mktemp)
          namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
          cat << EOF > "$config_file"
          namespace: $namespace
          scannerV4: true
          images:
            scannerDb: "localhost:5001/stackrox/scanner-db:latest"
          EOF
          /stackrox/installer -conf "$config_file" apply central
          kubectl wait --for=condition=Available --timeout=120s deploy/central
          /stackrox/installer -conf "$config_file" apply crs
          /stackrox/installer -conf "$config_file" apply securedcluster
