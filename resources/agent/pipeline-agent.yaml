apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: stackrox-agent
spec:
  description: | 
    Agent to monitor and collect data inside of VMs
  params:
  - name: repo-url
    type: string
  - name: revision
    type: string
  - name: builder-image
    type: string
  workspaces:
  - name: shared-data
  - name: dockerconfig
  tasks:
  - name: fetch-source
    workspaces:
    - name: output
      workspace: shared-data
    taskRef:
      name: git-clone
    params:
    - name: url
      value: $(params.repo-url)
    - name: submodules
      value: "false"
    - name: revision
      value: $(params.revision)
    - name: subdirectory
      value: source
  - name: fetch-gomod-cache
    runAfter:
    - fetch-source
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskRef:
      name: fetch-cache
    params:
    - name: BUILDER_IMAGE
      value: $(params.builder-image)
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-mod-cache
  - name: fetch-go-cache
    runAfter:
    - fetch-gomod-cache
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskRef:
      name: fetch-cache
    params:
    - name: BUILDER_IMAGE
      value: $(params.builder-image)
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-cache
  - name: go-mod-tidy
    runAfter:
    - fetch-go-cache
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskSpec:
      steps:
      - name: go-mod-tidy
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          mkdir -p $(workspaces.shared-data.path)/build-cache
          cd $(workspaces.shared-data.path)/source
          export GOARCH=arm64
          GOMODCACHE=$(workspaces.shared-data.path)/go-mod-cache GOCACHE=$(workspaces.shared-data.path)/build-cache /go/bin/go mod tidy
  - name: build-agent
    runAfter:
    - go-mod-tidy
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskSpec:
      steps:
      - name: build-go-binaries
        image: $(params.builder-image)
        script: |
          #!/usr/bin/env bash
          set -ex
          cd $(workspaces.shared-data.path)/source
          export PATH=$PATH:/go/bin
          export GOARCH=arm64
          GOMODCACHE=$(workspaces.shared-data.path)/go-mod-cache GOCACHE=$(workspaces.shared-data.path)/go-cache make bin/agent
  - name: put-go-cache
    runAfter:
    - build-agent
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskRef:
      name: put-cache
    params:
    - name: BUILDER_IMAGE
      value: $(params.builder-image)
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-cache
  - name: put-gomod-cache
    runAfter:
    - put-go-cache
    workspaces:
    - name: shared-data
      workspace: shared-data
    taskRef:
      name: put-cache
    params:
    - name: BUILDER_IMAGE
      value: $(params.builder-image)
    - name: HASHED_FILE_PATH
      value: go.mod
    - name: BUCKET_NAME
      value: go-mod-cache
  - name: build-agent-image
    runAfter:
    - build-agent
    workspaces:
    - name: source
      workspace: shared-data
    - name: dockerconfig
      workspace: dockerconfig
    taskRef:
      name: buildah
    params:
    - name: IMAGE
      value: kind-registry:5000/stackrox/stackrox-agent:latest
    - name: PUSH_EXTRA_ARGS
      value: "--tls-verify=false"
    - name: CONTEXT
      value: ./source
    - name: DOCKERFILE
      value: ./agent.Dockerfile
