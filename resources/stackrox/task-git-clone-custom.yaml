apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone-custom
spec:
  description: >-
    Custom git clone task using stackrox-builder image to avoid registry issues
  params:
  - name: url
    description: Repository URL to clone from
    type: string
  - name: revision
    description: Revision to checkout (branch, tag, sha, ref, etc...)
    type: string
    default: ""
  - name: subdirectory
    description: Subdirectory inside the output Workspace to clone the repo into
    type: string
    default: ""
  - name: depth
    description: Perform a shallow clone, fetching only the most recent N commits
    type: string
    default: "1"
  - name: submodules
    description: Initialize and fetch git submodules
    type: string
    default: "true"
  - name: builder-image
    description: Builder image to use for git operations
    type: string
    default: "quay.io/klape/stackrox-builder:latest-arm64"
  workspaces:
  - name: output
    description: The git repo will be cloned onto the volume backing this Workspace
  results:
  - name: commit
    description: The precise commit SHA that was fetched by this Task
  - name: url
    description: The precise URL that was fetched by this Task
  - name: committer-date
    description: The epoch timestamp of the commit that was fetched by this Task
  steps:
  - name: clone
    image: $(params.builder-image)
    script: |
      #!/usr/bin/env bash
      set -eu

      CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

      # Clean existing directory if it exists
      if [ -d "${CHECKOUT_DIR}" ]; then
        rm -rf "${CHECKOUT_DIR}"
      fi

      # Create parent directory if needed
      mkdir -p "$(dirname "${CHECKOUT_DIR}")"

      # Clone the repository first
      if [ "$(params.depth)" = "0" ]; then
        git clone "$(params.url)" "${CHECKOUT_DIR}"
      else
        git clone --depth="$(params.depth)" "$(params.url)" "${CHECKOUT_DIR}"
      fi

      cd "${CHECKOUT_DIR}"

      # Checkout specific revision if specified
      if [ -n "$(params.revision)" ]; then
        # First try to checkout directly (works for branches and tags)
        if ! git checkout "$(params.revision)" 2>/dev/null; then
          # If that fails, fetch the revision and try again (works for SHA and refs)
          git fetch origin "$(params.revision):$(params.revision)" 2>/dev/null || true
          git checkout "$(params.revision)" || {
            # Last resort: fetch everything and checkout
            git fetch --all
            git checkout "$(params.revision)"
          }
        fi
      fi

      # Initialize submodules if requested
      if [ "$(params.submodules)" = "true" ]; then
        git submodule update --init --recursive
      fi

      # Get results
      RESULT_SHA="$(git rev-parse HEAD)"
      RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"

      # Write results
      echo -n "${RESULT_SHA}" > "$(results.commit.path)"
      echo -n "$(params.url)" > "$(results.url.path)"
      echo -n "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"

      echo "Successfully cloned $(params.url) at commit ${RESULT_SHA}"
